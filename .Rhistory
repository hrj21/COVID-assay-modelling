geom_raster(alpha = 0.5) +
geom_point(data = filter(bead, Label != "SPECIAL"), shape = 21, col = "black") +
labs(x = "Fold change in N protein IgG reactivity",
y = "Fold change in RBD protein IgM reactivity",
title = "XGB decision boundary") +
coord_cartesian(ylim = c(0, 60), xlim = c(0, 60), expand = FALSE) +
theme_elements
((lda_boundary | (logreg_boundary1 / logreg_boundary2)) /
(svm_boundary | xgb_boundary)) +
plot_layout(guides = "collect")
((lda_boundary | (logreg_boundary1 + logreg_boundary2)) /
(svm_boundary | xgb_boundary)) +
plot_layout(guides = "collect")
long %>%
mutate(Isotype = factor(Isotype,
levels = c("IgG", "IgM", "IgA")),
Protein_target = factor(Protein_target,
levels = c("N", "S1", "RBD"))) %>%
arrange(Isotype, Protein_target, Fold_change) %>%
mutate(Short_ID = factor(Short_ID, levels = unique(Short_ID))) %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, log2(Fold_change), col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free", space = "free_x") +
geom_point() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by N IgG reactivity",
subtitle = "Distinct log2-transformed y axis per protein target") +
theme_elements
bead %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(S1_IgG, N_IgG, col = Label)) +
geom_point() +
theme_elements
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, Fold_change, col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free_x", space = "free_x") +
geom_point() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Common y axis") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
ggsave("plots/Beads_common_axis.pdf", width = 12, height = 6)
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, Fold_change, col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free", space = "free_x") +
geom_point() +
theme_bw() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Distinct y axis per protein target") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
ggsave("plots/Beads_distinct_axes.pdf", width = 12, height = 6)
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, log2(Fold_change), col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free", space = "free_x") +
geom_point() +
theme_bw() +
labs(y = "Log2 fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Distinct log2-transformed y axis per protein target") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
ggsave("plots/Beads_log2_axis.pdf", width = 12, height = 6)
confusion_matrices
confusion_matrices[[1]]
confusion_matrices[[1]] %>% class
confusion_matrices[[1]] %>% as.table()
confusion_matrices[[1]] %>% as.data.frame()
confusion_matrices[[1]]$result
confusion_matrices[[1]]$result %>% as.data.frame()
confusion_matrices[[1]]$result %>% as.table
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
confusion_matrices[[1]]$result %>% grid.table
confusion_matrices[[1]]$result %>% grid.table
?grid.table
ggsave("plots/Beads_decision_boundaries.pdf", width = 10, height = 12)
((lda_boundary | (logreg_boundary1 + logreg_boundary2)) /
(svm_boundary | xgb_boundary)) +
plot_layout(guides = "collect")
ggsave("plots/Beads_decision_boundaries.pdf", width = 10, height = 12)
ggsave("plots/Beads_decision_boundaries.pdf", width = 12, height = 6)
ggsave("plots/Beads_decision_boundaries.pdf", width = 12, height = 10)
ggsave("plots/Beads_decision_boundaries.pdf", width = 12, height = 8)
ggsave("plots/Beads_decision_boundaries.pdf", width = 12, height = 7)
ggsave("plots/Beads_decision_boundaries.pdf", width = 14, height = 7)
long %>%
mutate(Isotype = factor(Isotype,
levels = c("IgG", "IgM", "IgA")),
Protein_target = factor(Protein_target,
levels = c("N", "S1", "RBD"))) %>%
arrange(Isotype, Protein_target, Fold_change) %>%
mutate(Short_ID = factor(Short_ID, levels = unique(Short_ID))) %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, log2(Fold_change), col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free", space = "free_x") +
geom_point() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by N IgG reactivity",
subtitle = "Distinct log2-transformed y axis per protein target") +
theme_elements
ggsave("plots/Beads_ordered_by_N_IgG.pdf", width = 12, height = 6)
resample(wrapped_svm, bead_task, resampling = holdout)
svm_tuning <- makeTuneWrapper(learner = svm,
resampling = k_fold,
par.set = svm_hyper_space,
control = irace)
lda <- makeLearner("classif.lda")
logreg <- makeLearner("classif.logreg")
svm <- makeLearner("classif.svm")
xgb <- makeLearner("classif.xgboost", par.vals = list("nrounds" = 20))
k_fold <- makeResampleDesc("CV", iters = 3, stratify = TRUE)
holdout <- makeResampleDesc("Holdout", stratify = TRUE)
kernels <- c("polynomial", "radial", "sigmoid")
svm_hyper_space <- makeParamSet(
makeDiscreteParam("kernel", values = kernels),
makeIntegerParam("degree", lower = 1, upper = 3),
makeNumericParam("cost", lower = 0.1, upper = 10),
makeNumericParam("gamma", lower = 0.1, upper = 10)
)
xgb_hyper_space <- makeParamSet(
makeNumericParam("eta", lower = 0, upper = 1),
makeNumericParam("gamma", lower = 0, upper = 5),
makeIntegerParam("max_depth", lower = 1, 5),
makeNumericParam("min_child_weight", lower = 1, upper = 10),
makeNumericParam("subsample", lower = 0.5, upper = 1),
makeNumericParam("colsample_bytree", lower = 0.5, upper = 1),
makeDiscreteParam("eval_metric", values = c("error", "logloss"))
)
irace <- makeTuneControlIrace(maxExperiments = 200L)
feat_sel_control <- makeFeatSelControlSequential(method = "sfs")
wrapped_lda <- makeFeatSelWrapper(learner = lda,
resampling = k_fold,
control = feat_sel_control)
wrapped_logreg <- makeFeatSelWrapper(learner = logreg,
resampling = k_fold,
control = feat_sel_control)
svm_tuning <- makeTuneWrapper(learner = svm,
resampling = k_fold,
par.set = svm_hyper_space,
control = irace)
wrapped_svm <- makeFeatSelWrapper(learner = svm_tuning,
resampling = k_fold,
control = feat_sel_control)
resample(wrapped_svm, bead_task, resampling = holdout)
data_for_models <- filter(bead, Label != "SPECIAL") %>% select(-Sample, -Plate)
bead_task <- makeClassifTask(data = data_for_models, target = "Label")
resample(wrapped_svm, bead_task, resampling = holdout)
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, Fold_change, col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free_x", space = "free_x") +
geom_point() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Common y axis") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
ggsave("plots/Beads_common_axis.png", width = 12, height = 6)
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, Fold_change, col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free", space = "free_x") +
geom_point() +
theme_bw() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Distinct y axis per protein target") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
ggsave("plots/Beads_distinct_axes.png", width = 12, height = 6)
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, log2(Fold_change), col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free", space = "free_x") +
geom_point() +
theme_bw() +
labs(y = "Log2 fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Distinct log2-transformed y axis per protein target") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
ggsave("plots/Beads_log2_axis.png", width = 12, height = 6)
((lda_boundary | (logreg_boundary1 + logreg_boundary2)) /
(svm_boundary | xgb_boundary)) +
plot_layout(guides = "collect")
ggsave("plots/Beads_decision_boundaries.png", width = 14, height = 7)
long %>%
mutate(Isotype = factor(Isotype,
levels = c("IgG", "IgM", "IgA")),
Protein_target = factor(Protein_target,
levels = c("N", "S1", "RBD"))) %>%
arrange(Isotype, Protein_target, Fold_change) %>%
mutate(Short_ID = factor(Short_ID, levels = unique(Short_ID))) %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, log2(Fold_change), col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free", space = "free_x") +
geom_point() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by N IgG reactivity",
subtitle = "Distinct log2-transformed y axis per protein target") +
theme_elements
ggsave("plots/Beads_ordered_by_N_IgG.png", width = 12, height = 6)
confusion_matrices <- list(
lda = calculateConfusionMatrix(
bench_results$results$data_for_models$classif.lda.featsel$pred
),
logreg = calculateConfusionMatrix(
bench_results$results$data_for_models$classif.logreg.featsel$pred
),
svm = calculateConfusionMatrix(
bench_results$results$data_for_models$classif.svm.tuned.featsel$pred
),
xgb = calculateConfusionMatrix(
bench_results$results$data_for_models$classif.xgboost.tuned.featsel$pred
)
)
confusion_matrices
performance_metrics <- function(confusion) {
tibble(
Accuracy = (confusion$result[1, 1] + confusion$result[2, 2]) /
sum(confusion$result[1:2, 1:2]),
# FPR: proportion of all negs yielding positive results
FPR = confusion$result[1, 2] / sum(confusion$result[1, 1:2]),
# FNR: proportion of all pos yielding negative reuslt
FNR = confusion$result[2, 1] / sum(confusion$result[2, 1:2]),
# Precision: proportion of truly neg we detect as neg
Precision = confusion$result[2, 2] /
(confusion$result[2, 2] + confusion$result[1, 2]),
# Recall/sensitivity: proportion of truly pos we detect as pos
Recall =  confusion$result[2, 2] /
(confusion$result[2, 2] + confusion$result[2, 1]),
F1 = 2 / ((1 / Precision) + (1 / Recall)),
)
}
metrics <- map_df(confusion_matrices, performance_metrics)
metrics$Model <- names(confusion_matrices)
metrics
getFeatSelResult(models$classif.lda.featsel[[1]])
getFeatSelResult(models$classif.logreg.featsel[[1]])
getFeatSelResult(models$classif.svm.tuned.featsel[[1]])
getFeatSelResult(models$classif.xgboost.tuned.featsel[[1]])
data_by_assay <- master %>%
pivot_longer(cols = c(-Lab_ref, -Serum_date, -Label),
names_to = "Feature",
values_to = "Value") %>%
separate(Feature, into = c("Isotype", "Protein_target", "Assay")) %>%
group_by(Assay) %>%
group_split()
master <- read_csv("Master_data.csv")
master
glimpse(master)
master <- read_csv("data/Master_data.csv")
master
glimpse(master)
data_by_assay <- master %>%
pivot_longer(cols = c(-Lab_ref, -Serum_date, -Label),
names_to = "Feature",
values_to = "Value") %>%
separate(Feature, into = c("Isotype", "Protein_target", "Assay")) %>%
group_by(Assay) %>%
group_split()
bead <- data_by_assay[[1]] %>%
unite(col = "Reactivity", Protein_target, Isotype, sep = "_") %>%
pivot_wider(id_cols = c(Lab_ref, Label),
names_from = Reactivity,
values_from = Value)
ELISA <- data_by_assay[[2]] %>%
unite(col = "Reactivity", Protein_target, Isotype, sep = "_") %>%
pivot_wider(id_cols = c(Lab_ref, Label),
names_from = Reactivity,
values_from = Value)
cell <- data_by_assay[[3]] %>%
unite(col = "Reactivity", Protein_target, Isotype, sep = "_") %>%
pivot_wider(id_cols = c(Lab_ref, Label),
names_from = Reactivity,
values_from = Value)
theme_elements <- list(theme_bw(),
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.spacing = unit(0, "lines")),
scale_color_brewer(type = "qual", palette = "Set1"),
scale_fill_brewer(type = "qual", palette = "Set1"))
cell %>%
ggplot(aes(IgG_Perc, IgGAM_Perc, fill = Label)) +
geom_point(size = 2, shape = 21, col = "black") +
labs(y = "Percentage IgA+ / IgM+",
x = "Percentage IgG+",
title = "IgG only reactivity vs. combined IgG + IgA + IgM reactivity",
subtitle = "Cell assay") +
theme_elements
cell %>%
ggplot(aes(IgG_Perc, IgGAM_Perc, fill = Label)) +
geom_point(size = 2, shape = 21, col = "black") +
labs(y = "Percentage IgG+ IgA+ IgM+",
x = "Percentage IgG+",
title = "IgG only reactivity vs. combined IgG + IgA + IgM reactivity",
subtitle = "Cell assay") +
theme_elements
ggsave("plots/Cells.png", width = 12, height = 6)
readRDS("models/cell_bench_results_2020-05-18 10:33:03")
cell_bench_results <- readRDS("models/cell_bench_results_2020-05-18 10:33:03")
confusion_matrices <- list(
lda = calculateConfusionMatrix(
cell_bench_results$results$cell_for_models$classif.lda.featsel$pred
),
logreg = calculateConfusionMatrix(
cell_bench_results$results$cell_for_models$classif.logreg.featsel$pred
),
svm = calculateConfusionMatrix(
cell_bench_results$results$cell_for_models$classif.svm.tuned.featsel$pred
),
xgb = calculateConfusionMatrix(
cell_bench_results$results$cell_for_models$classif.xgboost.tuned.featsel$pred
)
)
confusion_matrices
performance_metrics <- function(confusion) {
tibble(
Accuracy = (confusion$result[1, 1] + confusion$result[2, 2]) /
sum(confusion$result[1:2, 1:2]),
# FPR: proportion of all negs yielding positive results
FPR = confusion$result[1, 2] / sum(confusion$result[1, 1:2]),
# FNR: proportion of all pos yielding negative reuslt
FNR = confusion$result[2, 1] / sum(confusion$result[2, 1:2]),
# Precision: proportion of truly neg we detect as neg
Precision = confusion$result[2, 2] /
(confusion$result[2, 2] + confusion$result[1, 2]),
# Recall/sensitivity: proportion of truly pos we detect as pos
Recall =  confusion$result[2, 2] /
(confusion$result[2, 2] + confusion$result[2, 1]),
F1 = 2 / ((1 / Precision) + (1 / Recall)),
)
}
confusion_matrices
metrics <- map_df(confusion_matrices, performance_metrics)
metrics$Model <- names(confusion_matrices)
metrics
getFeatSelResult(cell_models$classif.lda.featsel[[1]])
cell_models <- getBMRModels(cell_bench_results, drop = TRUE)
getFeatSelResult(cell_models$classif.lda.featsel[[1]])
getFeatSelResult(cell_models$classif.logreg.featsel[[1]])
getFeatSelResult(cell_models$classif.svm.tuned.featsel[[1]])
getFeatSelResult(cell_models$classif.xgboost.tuned.featsel[[1]])
cell_grid <- expand.grid(seq(0, 50, 0.1), seq(0, 100, 0.2))
names(cell_grid) <- c("IgG_Perc", "IgGAM_Perc")
cell_grid %>%
mutate(LDA = predict(cell_models[[1]][[1]], newdata = .)$data[, 1],
LogReg = predict(cell_models[[2]][[1]], newdata = .)$data[, 1],
SVM = predict(cell_models[[3]][[1]], newdata = .)$data[, 1],
XGB = predict(cell_models[[4]][[1]], newdata = .)$data[, 1]) %>%
pivot_longer(cols = c(LDA, LogReg, SVM, XGB),
names_to = "Model", values_to = "Label") %>%
ggplot(aes(IgG_Perc, IgGAM_Perc, col = Label, fill = Label)) +
facet_wrap(~ Model) +
geom_raster(alpha = 0.5) +
labs(y = "Percentage IgA+ / IgM+",
x = "Percentage IgG+",
title = "Visualising decision boundaries for each model",
subtitle = "Cell assay") +
coord_cartesian(expand = FALSE) +
geom_point(data = cell, shape = 21, col = "black") +
theme_elements
ggsave("plots/Cells_decision_boundaries.png", width = 12, height = 6)
cell_models
cell_bench_results$results$cell_for_models$classif.xgboost.tuned.featsel
confusion_matrices <- list(
lda = calculateConfusionMatrix(
cell_bench_results$results$cell_for_models$classif.lda.featsel$pred
),
logreg = calculateConfusionMatrix(
cell_bench_results$results$cell_for_models$classif.logreg.featsel$pred
),
svm = calculateConfusionMatrix(
cell_bench_results$results$cell_for_models$classif.svm.tuned.featsel$pred
),
xgb = calculateConfusionMatrix(
cell_bench_results$results$cell_for_models$classif.xgboost.tuned.featsel$pred
)
)
confusion_matrices
master
master %>%
pivot_longer(cols = c(-Lab_ref, -Serum_date, -Label),
names_to = "Feature",
values_to = "Value")
master %>%
pivot_longer(cols = c(-Lab_ref, -Serum_date, -Label),
names_to = "Feature",
values_to = "Value") %>%
separate(Feature, into = c("Isotype", "Protein_target", "Assay"))
ELISA
ELISA
bead
bead
long <- bead %>%
pivot_longer(cols = c(-Sample, -Label, -Plate),
names_to = "Reactivity",
values_to = "Fold_change") %>%
separate(Reactivity,
into = c("Protein_target", "Isotype"),
sep = "_") %>%
mutate(Isotype = factor(Isotype,
levels = c("IgG", "IgM", "IgA")),
Protein_target = factor(Protein_target,
levels = c("S1", "N", "RBD"))) %>%
arrange(Isotype, Protein_target, Fold_change) %>%
mutate(Short_ID = group_indices(., Sample) %>% factor(levels = unique(.)))
bead <- read_csv("data/20200512_BEADS_Analysis.csv")
bead
glimpse(bead)
long <- bead %>%
pivot_longer(cols = c(-Sample, -Label, -Plate),
names_to = "Reactivity",
values_to = "Fold_change") %>%
separate(Reactivity,
into = c("Protein_target", "Isotype"),
sep = "_") %>%
mutate(Isotype = factor(Isotype,
levels = c("IgG", "IgM", "IgA")),
Protein_target = factor(Protein_target,
levels = c("S1", "N", "RBD"))) %>%
arrange(Isotype, Protein_target, Fold_change) %>%
mutate(Short_ID = group_indices(., Sample) %>% factor(levels = unique(.)))
long
bead %>%
pivot_longer(cols = c(-Sample, -Label, -Plate),
names_to = "Reactivity",
values_to = "Fold_change") %>%
separate(Reactivity,
into = c("Protein_target", "Isotype"),
sep = "_") %>%
mutate(Isotype = factor(Isotype,
levels = c("IgG", "IgM", "IgA")),
Protein_target = factor(Protein_target,
levels = c("S1", "N", "RBD"))) %>%
arrange(Isotype, Protein_target, Fold_change) %>%
mutate(Sample = factor(Sample, levels = unique(Sample)))
long <- bead %>%
pivot_longer(cols = c(-Sample, -Label, -Plate),
names_to = "Reactivity",
values_to = "Fold_change") %>%
separate(Reactivity,
into = c("Protein_target", "Isotype"),
sep = "_") %>%
mutate(Isotype = factor(Isotype,
levels = c("IgG", "IgM", "IgA")),
Protein_target = factor(Protein_target,
levels = c("S1", "N", "RBD"))) %>%
arrange(Isotype, Protein_target, Fold_change) %>%
mutate(Sample = factor(Sample, levels = unique(Sample)))
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Short_ID, Fold_change, col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free_x", space = "free_x") +
geom_point() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Common y axis") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Sample, Fold_change, col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free_x", space = "free_x") +
geom_point() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Common y axis") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Sample, Fold_change, col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free", space = "free_x") +
geom_point() +
theme_bw() +
labs(y = "Fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Distinct y axis per protein target") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
long %>%
filter(Label != "SPECIAL") %>%
ggplot(aes(Sample, log2(Fold_change), col = Isotype)) +
facet_grid(Protein_target ~ Label, scales = "free", space = "free_x") +
geom_point() +
theme_bw() +
labs(y = "Log2 fold change from secondary only",
x = "Patient",
title = "Reactivity for each patient, ordered by S1 IgG reactivity",
subtitle = "Distinct log2-transformed y axis per protein target") +
theme_elements +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
